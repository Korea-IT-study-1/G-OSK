<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.Gosk.GoskProject20221221.repository.AdminRepository">

    <resultMap id="ProductList" type="com.Gosk.GoskProject20221221.domain.Admin.ProductList">
        <result property="pdname" column="pdname"></result>
        <result property="time" column="time"></result>
        <result property="price" column="price"></result>
    </resultMap>



    <select id="getReservedList" resultMap="ProductList">

        SELECT
            reserved_price_id as id,
            "기간권" as pdname,
            CONCAT(CAST(reserved_time as char(20)),'주') as time,
            CONCAT(CAST(format(reserved_price,0) as char(10)), '원') as price
        FROM
            reserved_price_mst
        ORDER BY
            reserved_time

    </select>
    
    <select id="getGeneralList" resultMap="ProductList">

        SELECT * FROM (
                SELECT
                    oneday_price_id as id,
                    "원데이" as pdname,
                    CONCAT(CAST(oneday_time as char(20)),'시간') as time,
                    CONCAT(CAST(format(oneday_price,0) as char(10)), '원') as price
                FROM
                    oneday_price_mst
                ORDER BY
                    oneday_time
                Limit 1000000
        ) as a

        UNION ALL

        SELECT * FROM (
            SELECT
                commuter_tp_id as id,
                "시간권" as pdname,
                CONCAT(CAST(commuter_tp_time as char(20)),'시간') as time,
                CONCAT(CAST(format(commuter_tp_price,0) as char(10)), '원') as price
            FROM
                commuter_time_price_mst
            ORDER BY
                commuter_tp_time
            LIMIT 1000000
        ) as b

        UNION ALL

        SELECT * FROM (
            SELECT
                commuter_dp_id as id,
                "기간권" as pdname,
                CONCAT(CAST(commuter_dp_time as char(20)),'주') as time,
                CONCAT(CAST(format(commuter_dp_price,0) as char(10)), '원') as price
            FROM
                commuter_day_price_mst
            ORDER BY
                commuter_dp_time
            LIMIT 1000000
        ) as c

    </select>
    <select id="loadUserList" resultType="com.Gosk.GoskProject20221221.domain.Admin.UserList">
        SELECT
            user_phone,
            user_pw,
            user_create_date,
            user_update_date,
            user_id
        FROM
            user_mst;
    </select>

    <delete id="deleteUser">
        DELETE
        FROM
            user_mst
        WHERE
            user_phone = #{user_phone};
    </delete>

    <update id="updateUser">
        UPDATE
        user_mst
        SET

        user_phone = #{after_phone},
        user_pw = #{after_pw}
        WHERE
        user_phone = #{user_phone};
    </update>

    <update id="usertime" parameterType="integer">
        update
            user_mst
        set
            user_time=null,
            user_date=null,
            user_create_date = null
        WHERE
        user_id = #{user_id};

        update
        seat_mst
        set
        user_id = 0,
        seat_start_time= null
        WHERE
        user_id = #{user_id};

        update
        reserved_seat_mst
        set
        user_id = 0,
        reserved_start_time=null
        WHERE
        user_id = #{user_id};

        update
        receipt_mst
        set
        receipt_onoff = 0
        WHERE
        user_id = #{user_id};
    </update>
    <update id="userday" parameterType="String">
        update
            user_mst
        set
            user_update_date= #{now};
    </update>
    <update id="repairBasicSeat" parameterType="hashmap">
        UPDATE
            seat_mst
        SET
            user_id = if(user_id = -1, '0', '-1')
        WHERE
            seat_id = #{seat_id};

        UPDATE
            user_mst
        SET
            user_out = null
        WHERE
            user_id = #{user_id};
    </update>
    <update id="repairReservedSeat">
        UPDATE
            reserved_seat_mst
        SET
            user_id = if(user_id = -1, '0', '-1')
        WHERE
            reserved_seat_id = #{seat_id};

        UPDATE
            user_mst
        SET
            user_out = null
        WHERE
            user_id = #{user_id};
    </update>
    <update id="repairLocker">
        UPDATE
            locker_mst
        SET
            user_id = if(user_id = -1, '0', '-1')
        WHERE
            locker_id = #{seat_id};

<!--        UPDATE-->
<!--            user_mst-->
<!--        SET-->
<!--            user_out = null-->
<!--        WHERE-->
<!--            user_id = #{user_id};-->
    </update>
    <update id="exitBasicSeat">
        UPDATE
            seat_mst
        SET
            user_id = 0
        WHERE
            seat_id = #{seat_id};

        UPDATE
            user_mst
        SET
            user_out = null
        WHERE
            user_id = #{user_id};

    </update>
    <update id="exitReservedSeat">
        UPDATE
            reserved_seat_mst
        SET
            user_id = 0
        WHERE
            reserved_seat_id = #{seat_id};

        UPDATE
            user_mst
        SET
            user_out = null
        WHERE
            user_id = #{user_id};
    </update>
    <update id="exitLocker">
        UPDATE
            locker_mst
        SET
            user_id = 0
        WHERE
            locker_id = #{seat_id};

    </update>

    <select id="loadUserInfoList" resultType="com.Gosk.GoskProject20221221.domain.Admin.UserInfoList">
        SELECT
        um.user_id,
        um.user_phone,
        um.user_out,
        rm.receipt_kinds,
        rm.receipt_time,
        rm.receipt_day,
        rm.receipt_start_date,
        rm.receipt_price
        FROM
        user_mst um
        LEFT OUTER JOIN receipt_mst rm ON(um.user_id = rm.user_id)
        WHERE
        um.user_phone = #{user_phone};
    </select>

    <select id="salesList"  resultType="com.Gosk.GoskProject20221221.domain.Admin.SalesList">
        SELECT
            receipt_id,
            user_id,
            receipt_kinds,
            receipt_price,
            receipt_time,
            receipt_day,
            SUBSTRING(receipt_start_date,1,10) AS receipt_start_date,
            receipt_onoff,
            COUNT(*) receipt_count
        FROM
            receipt_mst group BY receipt_kinds , receipt_time,receipt_day,receipt_price
            order by  receipt_start_date DESC
    </select>

    <select id="getLockerList" resultMap="ProductList">

        SELECT
            locker_price_id as id,
            "기간권" as pdname,
            CONCAT(CAST(locker_time as char(20)),'주') as time,
            CONCAT(CAST(format(locker_price,0) as char(10)), '원') as price
        FROM
            locker_price_mst
        ORDER BY
            locker_time

    </select>

    <delete id="getDelPayList_oneday">
        DELETE
        FROM
            oneday_price_mst
        WHERE
            oneday_price_id = #{product_id}
    </delete>

    <delete id="getDelPayList_commuter_time">
        DELETE
        FROM
            commuter_time_price_mst
        WHERE
            commuter_tp_id = #{product_id}
    </delete>

    <delete id="getDelPayList_commuter_day">
        DELETE
        FROM
            commuter_day_price_mst
        WHERE
            commuter_dp_id = #{product_id}
    </delete>

    <delete id="getDelPayList_reserved">
        DELETE
        FROM
            reserved_price_mst
        WHERE
            reserved_price_id = #{product_id}
    </delete>

    <delete id="getDelPayList_locker">
        DELETE
        FROM
            locker_price_mst
        WHERE
            locker_price_id = #{product_id}
    </delete>

    <select id="getOverlapChk_oneday" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk"
            resultType="boolean">
        SELECT
            count(oneday_price_id)
        From
            oneday_price_mst
        WHERE
            oneday_time = #{time}
    </select>

    <select id="getOverlapChk_commuter_time" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk"
            resultType="boolean">
        SELECT
            count(commuter_tp_id)
        FROM
            commuter_time_price_mst
        WHERE
            commuter_tp_time = #{time}
    </select>

    <select id="getOverlapChk_commuter_day" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk"
            resultType="boolean">
        SELECT
            count(commuter_dp_id)
        FROM
            commuter_day_price_mst
        WHERE
            commuter_dp_time = #{time}
    </select>

    <select id="getOverlapChk_reserved" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk"
            resultType="boolean">
        SELECT
            count(reserved_price_id)
        FROM
            reserved_price_mst
        WHERE
            reserved_time = #{time}
    </select>

    <select id="getOverlapChk_locker" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk"
            resultType="boolean">
        SELECT
            count(locker_price_id)
        FROM
            locker_price_mst
        WHERE
            locker_time = #{time}
    </select>

    <select id="getUpdOverlapChk_oneday" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdOverlapChk"
            resultType="boolean">
        SELECT
            count(oneday_price_id)
        From
            oneday_price_mst
        WHERE
            oneday_time not in (#{before_time})
        AND
            oneday_time = #{after_time}
    </select>

    <select id="getUpdOverlapChk_commuter_time" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdOverlapChk"
            resultType="boolean">
        SELECT
            count(commuter_tp_id)
        FROM
            commuter_time_price_mst
        WHERE
            commuter_tp_time not in (#{before_time})
        AND
            commuter_tp_time = #{after_time}
    </select>

    <select id="getUpdOverlapChk_commuter_day" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdOverlapChk"
            resultType="boolean">
        SELECT
            count(commuter_dp_id)
        FROM
            commuter_day_price_mst
        WHERE
            commuter_dp_time not in (#{before_time})
        AND
            commuter_dp_time = #{after_time}
    </select>

    <select id="getUpdOverlapChk_reserved" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdOverlapChk"
            resultType="boolean">
        SELECT
            count(reserved_price_id)
        FROM
            reserved_price_mst
        WHERE
            reserved_time not in (#{before_time})
        AND
            reserved_time = #{after_time}
    </select>

    <select id="getUpdOverlapChk_locker" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdOverlapChk"
            resultType="boolean">
        SELECT
            count(locker_price_id)
        FROM
            locker_price_mst
        WHERE
            reserved_time not in (#{before_time})
        AND
            reserved_time = #{after_time}
    </select>

    <insert id="getInsertPayList_oneday" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk">
        INSERT INTO
            oneday_price_mst(oneday_time,oneday_price)
        VALUES (
            #{time},
            #{price}
        )
    </insert>

    <insert id="getInsertPayList_commuter_time" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk">
        INSERT INTO
            commuter_time_price_mst(commuter_tp_time,commuter_tp_price)
        VALUES (
            #{time},
            #{price}
        )
    </insert>

    <insert id="getInsertPayList_commuter_day" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk">
        INSERT INTO
            commuter_day_price_mst(commuter_dp_time,commuter_dp_price)
        VALUES (
            #{time},
            #{price}
        )
    </insert>

    <insert id="getInsertPayList_reserved" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk">
        INSERT INTO
            reserved_price_mst(reserved_time,reserved_price)
        VALUES (
            #{time},
            #{price}
        )
    </insert>

    <insert id="getInsertPayList_locker" parameterType="com.Gosk.GoskProject20221221.domain.Admin.OverlapChk">
        INSERT INTO
            locker_price_mst(locker_time,locker_price)
        VALUES (
            #{time},
            #{price}
        )
    </insert>

    <update id="getUpdatePayList_oneday" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdPayList">
        UPDATE
            oneday_price_mst
        SET
            oneday_time = #{after_pdname},
            oneday_price = #{after_pdprice}
        WHERE
            oneday_price_id = #{id}
    </update>

    <update id="getUpdatePayList_commuter_day" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdPayList">
        UPDATE
            commuter_day_priec_mst
        SET
            commuter_dp_time = #{after_pdname},
            commuter_dp_price = #{after_pdprice}
        WHERE
            commuter_dp_id = #{id}
    </update>

    <update id="getUpdatePayList_commuter_time" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdPayList">
        UPDATE
            commuter_time_priec_mst
        SET
            commuter_tp_time = #{after_pdname},
            commuter_tp_price = #{after_pdprice}
        WHERE
            commuter_tp_id = #{id}
    </update>

    <update id="getUpdatePayList_reserved" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdPayList">
        UPDATE
            reserved_price_mst
        SET
            reserved_time = #{after_pdname},
            reserved_price = #{after_pdprice}
        WHERE
            reserved_price_id = #{id}
    </update>

    <update id="getUpdatePayList_locker" parameterType="com.Gosk.GoskProject20221221.domain.Admin.UpdPayList">
        UPDATE
            locker_price_mst
        SET
            locker_time = #{after_pdname},
            locker_price = #{after_pdprice}
        WHERE
            locker_price_id = #{id}
    </update>


</mapper>